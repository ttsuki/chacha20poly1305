// poly1305_test.cpp : This file contains the 'main' function. Program execution begins and ends there.

#include <cstddef>
#include <cstdint>
#include <string>
#include <vector>
#include <algorithm>

#include <iostream>

#include "./chacha20.h"

using byte = uint8_t;

int main()
{
    struct chacha20_block_function_test
    {
        std::string name;
        std::array<byte, 32> key;
        std::array<byte, 12> nonce;
        uint32_t block_counter;
        std::array<uint32_t, 16> stream;
    };

    const chacha20_block_function_test block_function_test_vectors[] = {
        chacha20_block_function_test{
            "Test Vector #1:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  ............
            },
            /* Block Counter = */ 0,
            {
                0xade0b876, 0x903df1a0, 0xe56a5d40, 0x28bd8653,
                0xb819d2bd, 0x1aed8da0, 0xccef36a8, 0xc70d778b,
                0x7c5941da, 0x8d485751, 0x3fe02477, 0x374ad8b8,
                0xf4b8436a, 0x1ca11815, 0x69b687c3, 0x8665eeb2,
            }
        },
        chacha20_block_function_test{
            "Test Vector #2:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  ............
            },
            /* Block Counter = */ 1,
            {
                0xbee7079f, 0x7a385155, 0x7c97ba98, 0x0d082d73,
                0xa0290fcb, 0x6965e348, 0x3e53c612, 0xed7aee32,
                0x7621b729, 0x434ee69c, 0xb03371d5, 0xd539d874,
                0x281fed31, 0x45fb0a51, 0x1f0ae1ac, 0x6f4d794b,
            }
        },
        chacha20_block_function_test{
            "Test Vector #3:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  ............
            },
            /*   Block Counter = */ 1,
            {
                0x2452eb3a, 0x9249f8ec, 0x8d829d9b, 0xddd4ceb1,
                0xe8252083, 0x60818b01, 0xf38422b8, 0x5aaa49c9,
                0xbb00ca8e, 0xda3ba7b4, 0xc4b592d1, 0xfdf2732f,
                0x4436274e, 0x2561b3c8, 0xebdd4aa6, 0xa0136c00,
            }
        },
        chacha20_block_function_test{
            "Test Vector #4:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  ............
            },
            /* Block Counter = */ 2,
            {
                0xfb4dd572, 0x4bc42ef1, 0xdf922636, 0x327f1394,
                0xa78dea8f, 0x5e269039, 0xa1bebbc1, 0xcaf09aae,
                0xa25ab213, 0x48a6b46c, 0x1b9d9bcb, 0x092c5be6,
                0x546ca624, 0x1bec45d5, 0x87f47473, 0x96f0992e,
            }
        },
        chacha20_block_function_test{
            "Test Vector #5:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, //  ............
            },
            /* Block Counter = */ 0,
            {
                0x374dc6c2, 0x3736d58c, 0xb904e24a, 0xcd3f93ef,
                0x88228b1a, 0x96a4dfb3, 0x5b76ab72, 0xc727ee54,
                0x0e0e978a, 0xf3145c95, 0x1b748ea8, 0xf786c297,
                0x99c28f5f, 0x628314e8, 0x398a19fa, 0x6ded1b53,
            }
        },
    };

    struct chacha20_test
    {
        std::string name;
        std::array<byte, 32> key;
        std::array<byte, 12> nonce;
        uint32_t initial_block_counter;
        std::vector<byte> plain_text;
        std::vector<byte> cipher_text;
    };

    const chacha20_test test_vectors[] =
    {
        chacha20_test{
            "Test Vector #1:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  ............
            },
            /* Initial Block Counter = */ 0,
            /* Plaintext: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 032 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 048 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
            },
            /* Ciphertext: */ {
                /* 000 */ 0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53, 0x86, 0xbd, 0x28, // v.....=.@]j.S..(
                /* 016 */ 0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36, 0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7, // .........6...w..
                /* 032 */ 0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48, 0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37, // .AY|QWH.w$.?..J7
                /* 048 */ 0x6a, 0x43, 0xb8, 0xf4, 0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86, // jC.........i..e.
            },
        },
        chacha20_test{
            "Test Vector #2:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
                /* 016 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ............
            },
            /* Initial Block Counter = */ 1,
            /* Plaintext: */ {
                /* 000 */ 0x41, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, // Any submission t
                /* 016 */ 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, // o the IETF inten
                /* 032 */ 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, // ded by the Contr
                /* 048 */ 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, // ibutor for publi
                /* 064 */ 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x72, // cation as all or
                /* 080 */ 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, //  part of an IETF
                /* 096 */ 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x20, //  Internet-Draft
                /* 112 */ 0x6f, 0x72, 0x20, 0x52, 0x46, 0x43, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, // or RFC and any s
                /* 128 */ 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x77, 0x69, // tatement made wi
                /* 144 */ 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, // thin the context
                /* 160 */ 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x61, 0x63, 0x74, 0x69, //  of an IETF acti
                /* 176 */ 0x76, 0x69, 0x74, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, // vity is consider
                /* 192 */ 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x22, 0x49, 0x45, 0x54, 0x46, 0x20, 0x43, 0x6f, 0x6e, 0x74, // ed an "IETF Cont
                /* 208 */ 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x20, 0x53, 0x75, 0x63, 0x68, 0x20, // ribution". Such
                /* 224 */ 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, // statements inclu
                /* 240 */ 0x64, 0x65, 0x20, 0x6f, 0x72, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, // de oral statemen
                /* 256 */ 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x49, 0x45, 0x54, 0x46, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, // ts in IETF sessi
                /* 272 */ 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, // ons, as well as
                /* 288 */ 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, // written and elec
                /* 304 */ 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, // tronic communica
                /* 320 */ 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e, // tions made at an
                /* 336 */ 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2c, // y time or place,
                /* 352 */ 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, //  which are addre
                /* 368 */ 0x73, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,                                                       // ssed to
            },
            /* Ciphertext: */ {
                /* 000 */ 0xa3, 0xfb, 0xf0, 0x7d, 0xf3, 0xfa, 0x2f, 0xde, 0x4f, 0x37, 0x6c, 0xa2, 0x3e, 0x82, 0x73, 0x70, // ...}../.O7l.>.sp
                /* 016 */ 0x41, 0x60, 0x5d, 0x9f, 0x4f, 0x4f, 0x57, 0xbd, 0x8c, 0xff, 0x2c, 0x1d, 0x4b, 0x79, 0x55, 0xec, // A`].OOW...,.KyU.
                /* 032 */ 0x2a, 0x97, 0x94, 0x8b, 0xd3, 0x72, 0x29, 0x15, 0xc8, 0xf3, 0xd3, 0x37, 0xf7, 0xd3, 0x70, 0x05, // *....r)....7..p.
                /* 048 */ 0x0e, 0x9e, 0x96, 0xd6, 0x47, 0xb7, 0xc3, 0x9f, 0x56, 0xe0, 0x31, 0xca, 0x5e, 0xb6, 0x25, 0x0d, // ....G...V.1.^.%.
                /* 064 */ 0x40, 0x42, 0xe0, 0x27, 0x85, 0xec, 0xec, 0xfa, 0x4b, 0x4b, 0xb5, 0xe8, 0xea, 0xd0, 0x44, 0x0e, // @B.'....KK....D.
                /* 080 */ 0x20, 0xb6, 0xe8, 0xdb, 0x09, 0xd8, 0x81, 0xa7, 0xc6, 0x13, 0x2f, 0x42, 0x0e, 0x52, 0x79, 0x50, //  ........./B.RyP
                /* 096 */ 0x42, 0xbd, 0xfa, 0x77, 0x73, 0xd8, 0xa9, 0x05, 0x14, 0x47, 0xb3, 0x29, 0x1c, 0xe1, 0x41, 0x1c, // B..ws....G.)..A.
                /* 112 */ 0x68, 0x04, 0x65, 0x55, 0x2a, 0xa6, 0xc4, 0x05, 0xb7, 0x76, 0x4d, 0x5e, 0x87, 0xbe, 0xa8, 0x5a, // h.eU*....vM^...Z
                /* 128 */ 0xd0, 0x0f, 0x84, 0x49, 0xed, 0x8f, 0x72, 0xd0, 0xd6, 0x62, 0xab, 0x05, 0x26, 0x91, 0xca, 0x66, // ...I..r..b..&..f
                /* 144 */ 0x42, 0x4b, 0xc8, 0x6d, 0x2d, 0xf8, 0x0e, 0xa4, 0x1f, 0x43, 0xab, 0xf9, 0x37, 0xd3, 0x25, 0x9d, // BK.m-....C..7.%.
                /* 160 */ 0xc4, 0xb2, 0xd0, 0xdf, 0xb4, 0x8a, 0x6c, 0x91, 0x39, 0xdd, 0xd7, 0xf7, 0x69, 0x66, 0xe9, 0x28, // ......l.9...if.(
                /* 176 */ 0xe6, 0x35, 0x55, 0x3b, 0xa7, 0x6c, 0x5c, 0x87, 0x9d, 0x7b, 0x35, 0xd4, 0x9e, 0xb2, 0xe6, 0x2b, // .5U;.l\..{5....+
                /* 192 */ 0x08, 0x71, 0xcd, 0xac, 0x63, 0x89, 0x39, 0xe2, 0x5e, 0x8a, 0x1e, 0x0e, 0xf9, 0xd5, 0x28, 0x0f, // .q..c.9.^.....(.
                /* 208 */ 0xa8, 0xca, 0x32, 0x8b, 0x35, 0x1c, 0x3c, 0x76, 0x59, 0x89, 0xcb, 0xcf, 0x3d, 0xaa, 0x8b, 0x6c, // ..2.5.<vY...=..l
                /* 224 */ 0xcc, 0x3a, 0xaf, 0x9f, 0x39, 0x79, 0xc9, 0x2b, 0x37, 0x20, 0xfc, 0x88, 0xdc, 0x95, 0xed, 0x84, // .:..9y.+7 ......
                /* 240 */ 0xa1, 0xbe, 0x05, 0x9c, 0x64, 0x99, 0xb9, 0xfd, 0xa2, 0x36, 0xe7, 0xe8, 0x18, 0xb0, 0x4b, 0x0b, // ....d....6....K.
                /* 256 */ 0xc3, 0x9c, 0x1e, 0x87, 0x6b, 0x19, 0x3b, 0xfe, 0x55, 0x69, 0x75, 0x3f, 0x88, 0x12, 0x8c, 0xc0, // ....k.;.Uiu?....
                /* 272 */ 0x8a, 0xaa, 0x9b, 0x63, 0xd1, 0xa1, 0x6f, 0x80, 0xef, 0x25, 0x54, 0xd7, 0x18, 0x9c, 0x41, 0x1f, // ...c..o..%T...A.
                /* 288 */ 0x58, 0x69, 0xca, 0x52, 0xc5, 0xb8, 0x3f, 0xa3, 0x6f, 0xf2, 0x16, 0xb9, 0xc1, 0xd3, 0x00, 0x62, // Xi.R..?.o......b
                /* 304 */ 0xbe, 0xbc, 0xfd, 0x2d, 0xc5, 0xbc, 0xe0, 0x91, 0x19, 0x34, 0xfd, 0xa7, 0x9a, 0x86, 0xf6, 0xe6, // ...-.....4......
                /* 320 */ 0x98, 0xce, 0xd7, 0x59, 0xc3, 0xff, 0x9b, 0x64, 0x77, 0x33, 0x8f, 0x3d, 0xa4, 0xf9, 0xcd, 0x85, // ...Y...dw3.=....
                /* 336 */ 0x14, 0xea, 0x99, 0x82, 0xcc, 0xaf, 0xb3, 0x41, 0xb2, 0x38, 0x4d, 0xd9, 0x02, 0xf3, 0xd1, 0xab, // .......A.8M.....
                /* 352 */ 0x7a, 0xc6, 0x1d, 0xd2, 0x9c, 0x6f, 0x21, 0xba, 0x5b, 0x86, 0x2f, 0x37, 0x30, 0xe3, 0x7c, 0xfd, // z....o!.[./70.|.
                /* 368 */ 0xc4, 0xfd, 0x80, 0x6c, 0x22, 0xf2, 0x21,                                                       // ...l".!
            },
        },
        chacha20_test{
            "Test Vector #3:",
            // ==============
            /* Key: */ {
                /* 000 */ 0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a, 0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0, // ..@..U...3......
                /* 016 */ 0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09, 0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0, // G9..@+....\. pu.
            },
            /* Nonce: */ {
                /* 000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ............
            },
            /* Initial Block Counter = */ 42,
            /* Plaintext: */ {
                /* 000 */ 0x27, 0x54, 0x77, 0x61, 0x73, 0x20, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x67, 0x2c, 0x20, 0x61, // 'Twas brillig, a
                /* 016 */ 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6c, 0x69, 0x74, 0x68, 0x79, 0x20, 0x74, 0x6f, // nd the slithy to
                /* 032 */ 0x76, 0x65, 0x73, 0x0a, 0x44, 0x69, 0x64, 0x20, 0x67, 0x79, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, // ves.Did gyre and
                /* 048 */ 0x20, 0x67, 0x69, 0x6d, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, //  gimble in the w
                /* 064 */ 0x61, 0x62, 0x65, 0x3a, 0x0a, 0x41, 0x6c, 0x6c, 0x20, 0x6d, 0x69, 0x6d, 0x73, 0x79, 0x20, 0x77, // abe:.All mimsy w
                /* 080 */ 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x72, 0x6f, 0x67, 0x6f, 0x76, 0x65, // ere the borogove
                /* 096 */ 0x73, 0x2c, 0x0a, 0x41, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x20, // s,.And the mome 
                /* 112 */ 0x72, 0x61, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x67, 0x72, 0x61, 0x62, 0x65, 0x2e,       // raths outgrabe.
            },
            /* Ciphertext: */ {
                /* 000 */ 0x62, 0xe6, 0x34, 0x7f, 0x95, 0xed, 0x87, 0xa4, 0x5f, 0xfa, 0xe7, 0x42, 0x6f, 0x27, 0xa1, 0xdf, // b.4....._..Bo'..
                /* 016 */ 0x5f, 0xb6, 0x91, 0x10, 0x04, 0x4c, 0x0d, 0x73, 0x11, 0x8e, 0xff, 0xa9, 0x5b, 0x01, 0xe5, 0xcf, // _....L.s....[...
                /* 032 */ 0x16, 0x6d, 0x3d, 0xf2, 0xd7, 0x21, 0xca, 0xf9, 0xb2, 0x1e, 0x5f, 0xb1, 0x4c, 0x61, 0x68, 0x71, // .m=..!...._.Lahq
                /* 048 */ 0xfd, 0x84, 0xc5, 0x4f, 0x9d, 0x65, 0xb2, 0x83, 0x19, 0x6c, 0x7f, 0xe4, 0xf6, 0x05, 0x53, 0xeb, // ...O.e...l....S.
                /* 064 */ 0xf3, 0x9c, 0x64, 0x02, 0xc4, 0x22, 0x34, 0xe3, 0x2a, 0x35, 0x6b, 0x3e, 0x76, 0x43, 0x12, 0xa6, // ..d.."4.*5k>vC..
                /* 080 */ 0x1a, 0x55, 0x32, 0x05, 0x57, 0x16, 0xea, 0xd6, 0x96, 0x25, 0x68, 0xf8, 0x7d, 0x3f, 0x3f, 0x77, // .U2.W....%h.}??w
                /* 096 */ 0x04, 0xc6, 0xa8, 0xd1, 0xbc, 0xd1, 0xbf, 0x4d, 0x50, 0xd6, 0x15, 0x4b, 0x6d, 0xa7, 0x31, 0xb1, // .......MP..Km.1.
                /* 112 */ 0x87, 0xb5, 0x8d, 0xfd, 0x72, 0x8a, 0xfa, 0x36, 0x75, 0x7a, 0x79, 0x7a, 0xc1, 0x88, 0xd1,       // ....r..6uzyz...
            },
        }
    };

    bool all_test_is_passed = true;
    for (auto&& tv : block_function_test_vectors)
    {
        using key_stream = std::array<byte, 64>;
        key_stream result{};

        if (chacha20::process_stream(
                reinterpret_cast<const chacha20::key*>(tv.key.data()),
                reinterpret_cast<const chacha20::nonce*>(tv.nonce.data()),
                &result, &result, sizeof(result) * tv.block_counter, sizeof(result));
            std::memcmp(result.data(), tv.stream.data(), 64) != 0)
        {
            std::cerr << "BLOCK FUNCTION TEST [" << tv.name << "] FAILED" << "\n";
            all_test_is_passed = false;
        }
    }

    for (auto&& tv : test_vectors)
    {
        auto buffer = std::vector<byte>(tv.cipher_text.size(), 0);
        if (chacha20::process_stream(
                reinterpret_cast<const chacha20::key*>(tv.key.data()),
                reinterpret_cast<const chacha20::nonce*>(tv.nonce.data()),
                tv.plain_text.data(),
                buffer.data(),
                tv.initial_block_counter * size_t{64},
                buffer.size());
            std::memcmp(buffer.data(), tv.cipher_text.data(), tv.cipher_text.size()) != 0)
        {
            std::cerr << "TEST [" << tv.name << "] FAILED" << "\n";
            all_test_is_passed = false;
        }
    }

    return all_test_is_passed ? 0 : 1;
}
